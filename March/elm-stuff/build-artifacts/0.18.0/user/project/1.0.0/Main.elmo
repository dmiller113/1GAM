var _user$project$Main$renderScore = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1.owner;
	if (_p2.ctor === 'PlayerOne') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Player One: ',
						_elm_lang$core$Basics$toString(_p2._0))),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Player Two: ',
						_elm_lang$core$Basics$toString(_p2._0))),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Main$renderPaddle = function (paddle) {
	return A2(
		_elm_lang$svg$Svg$rect,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$x(
				_elm_lang$core$Basics$toString(paddle.position.x)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$y(
					_elm_lang$core$Basics$toString(paddle.position.y)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width('5'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height(
							_elm_lang$core$Basics$toString(paddle.width)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill(paddle.color),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$boardWidth = '450';
var _user$project$Main$boardHeight = '300';
var _user$project$Main$view = function (_p3) {
	var _p4 = _p3;
	var _p6 = _p4.paddles;
	var _p5 = _p4.ball;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$svg,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width(_user$project$Main$boardWidth),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height(_user$project$Main$boardHeight),
							_1: {ctor: '[]'}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$rect,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width(_user$project$Main$boardWidth),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height(_user$project$Main$boardHeight),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$x('0'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y('0'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('black'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$List$map, _user$project$Main$renderPaddle, _p6),
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$circle,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$cx(
											_elm_lang$core$Basics$toString(_p5.position.x)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cy(
												_elm_lang$core$Basics$toString(_p5.position.y)),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$r('5'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill(_p5.ballColor),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}))),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$map, _user$project$Main$renderScore, _p6)));
};
var _user$project$Main$handleSpeed = F3(
	function (_p7, paddleCollision, sideCollision) {
		var _p8 = _p7;
		var yScalar = sideCollision ? -1 : 1;
		var xScalar = paddleCollision ? -1 : 1;
		return {cX: _p8.cX * xScalar, cY: _p8.cY * yScalar};
	});
var _user$project$Main$isBallLegal = function (_p9) {
	var _p10 = _p9;
	var _p11 = _p10.x;
	return (_elm_lang$core$Native_Utils.cmp(_p11, 5) > 0) && (_elm_lang$core$Native_Utils.cmp(_p11, 445) < 0);
};
var _user$project$Main$hasSideCollisions = F2(
	function (_p13, _p12) {
		var _p14 = _p13;
		var _p17 = _p14.y;
		var _p15 = _p12;
		var _p16 = _p15.cY;
		return (_elm_lang$core$Native_Utils.eq(_p17, 5) && (_elm_lang$core$Native_Utils.cmp(_p16, 0) < 0)) || ((_elm_lang$core$Native_Utils.cmp(_p17, 295) > -1) && (_elm_lang$core$Native_Utils.cmp(_p16, 0) > 0));
	});
var _user$project$Main$hasCollided = F3(
	function (_p20, _p19, _p18) {
		var _p21 = _p20;
		var _p29 = _p21.cX;
		var _p22 = _p19;
		var _p28 = _p22.y;
		var _p27 = _p22.x;
		var _p23 = _p18;
		var _p26 = _p23.width;
		var _p25 = _p23.position;
		var _p24 = _p23.owner;
		if (_p24.ctor === 'PlayerOne') {
			return (_elm_lang$core$Native_Utils.cmp(_p29, 0) < 0) && ((_elm_lang$core$Native_Utils.cmp(_p27, 20) < 1) && ((_elm_lang$core$Native_Utils.cmp(_p28, _p25.y) > -1) && (_elm_lang$core$Native_Utils.cmp(_p28, _p25.y + _p26) < 1)));
		} else {
			return (_elm_lang$core$Native_Utils.cmp(_p29, 0) > 0) && ((_elm_lang$core$Native_Utils.cmp(_p27, 429) > -1) && ((_elm_lang$core$Native_Utils.cmp(_p28, _p25.y) > -1) && (_elm_lang$core$Native_Utils.cmp(_p28, _p25.y + _p26) < 1)));
		}
	});
var _user$project$Main$clampBounds = function (_p30) {
	var _p31 = _p30;
	return {
		x: A3(_elm_lang$core$Basics$clamp, 0, 445, _p31.x),
		y: A3(_elm_lang$core$Basics$clamp, 5, 295, _p31.y)
	};
};
var _user$project$Main$ballMomentum = F2(
	function (t, _p32) {
		var _p33 = _p32;
		var dT = t / (1000 / 24);
		var _p34 = _p33.position;
		var x = _p34.x;
		var y = _p34.y;
		var _p35 = _p33.ballSpeed;
		var cX = _p35.cX;
		var cY = _p35.cY;
		return {
			x: _elm_lang$core$Basics$floor(
				_elm_lang$core$Basics$toFloat(cX) * dT) + x,
			y: _elm_lang$core$Basics$floor(
				_elm_lang$core$Basics$toFloat(cY) * dT) + y
		};
	});
var _user$project$Main$updatePosition = function (t) {
	return function (_p36) {
		return _user$project$Main$clampBounds(
			A2(_user$project$Main$ballMomentum, t, _p36));
	};
};
var _user$project$Main$timeToPoll = (1000 / 24) * _elm_lang$core$Time$millisecond;
var _user$project$Main$initialPaddleWidth = 50;
var _user$project$Main$initialBall = {
	position: {x: 20, y: 35},
	ballColor: '#fff',
	ballSpeed: {cX: 5, cY: -1}
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {ball: a, paddles: b, lastTick: c};
	});
var _user$project$Main$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$Ball = F3(
	function (a, b, c) {
		return {position: a, ballColor: b, ballSpeed: c};
	});
var _user$project$Main$Speed = F2(
	function (a, b) {
		return {cX: a, cY: b};
	});
var _user$project$Main$Paddle = F4(
	function (a, b, c, d) {
		return {position: a, color: b, owner: c, width: d};
	});
var _user$project$Main$PlayerTwo = function (a) {
	return {ctor: 'PlayerTwo', _0: a};
};
var _user$project$Main$PlayerOne = function (a) {
	return {ctor: 'PlayerOne', _0: a};
};
var _user$project$Main$initState = {
	ctor: '_Tuple2',
	_0: {
		ball: _user$project$Main$initialBall,
		paddles: {
			ctor: '::',
			_0: {
				position: {x: 10, y: 25},
				color: '#bb6633',
				owner: _user$project$Main$PlayerOne(0),
				width: _user$project$Main$initialPaddleWidth
			},
			_1: {
				ctor: '::',
				_0: {
					position: {x: 435, y: 25},
					color: '#bb6633',
					owner: _user$project$Main$PlayerTwo(0),
					width: _user$project$Main$initialPaddleWidth
				},
				_1: {ctor: '[]'}
			}
		},
		lastTick: 0
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$addScore = F2(
	function (_p37, player) {
		var _p38 = _p37;
		var _p40 = _p38.x;
		var _p39 = player;
		if (_p39.ctor === 'PlayerOne') {
			return (_elm_lang$core$Native_Utils.cmp(_p40, 5) > 0) ? _user$project$Main$PlayerOne(_p39._0 + 1) : player;
		} else {
			return (_elm_lang$core$Native_Utils.cmp(_p40, 5) < 1) ? _user$project$Main$PlayerTwo(_p39._0 + 1) : player;
		}
	});
var _user$project$Main$handleScore = F2(
	function (position, paddles) {
		var changePaddleScore = function (paddle) {
			return _elm_lang$core$Native_Utils.update(
				paddle,
				{
					owner: A2(_user$project$Main$addScore, position, paddle.owner)
				});
		};
		return A2(_elm_lang$core$List$map, changePaddleScore, paddles);
	});
var _user$project$Main$update = F2(
	function (msg, state) {
		var _p41 = msg;
		switch (_p41.ctor) {
			case 'NoP':
				return {ctor: '_Tuple2', _0: state, _1: _elm_lang$core$Platform_Cmd$none};
			case 'KeyDown':
				var aset = A2(_elm_lang$core$Debug$log, 'code', _p41._0);
				return {ctor: '_Tuple2', _0: state, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p42 = _p41._0;
				var timeDelta = (!_elm_lang$core$Native_Utils.eq(state.lastTick, 0)) ? (_p42 - state.lastTick) : 0;
				var ball = state.ball;
				var ballOk = _user$project$Main$isBallLegal(ball.position);
				if (ballOk) {
					var sideCollisions = A2(_user$project$Main$hasSideCollisions, ball.position, ball.ballSpeed);
					var paddleCollisions = A2(
						_elm_lang$core$List$map,
						A2(_user$project$Main$hasCollided, ball.ballSpeed, ball.position),
						state.paddles);
					var newSpeed = A2(
						_user$project$Main$handleSpeed,
						ball.ballSpeed,
						A2(_elm_lang$core$List$any, _elm_lang$core$Basics$identity, paddleCollisions))(sideCollisions);
					var newBall = _elm_lang$core$Native_Utils.update(
						ball,
						{
							position: A2(_user$project$Main$updatePosition, timeDelta, ball),
							ballSpeed: newSpeed
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							state,
							{ball: newBall, lastTick: _p42}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							state,
							{
								ball: _user$project$Main$initialBall,
								paddles: A2(_user$project$Main$handleScore, ball.position, state.paddles)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, _user$project$Main$timeToPoll, _user$project$Main$Tick),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$initState, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$NoP = {ctor: 'NoP'};
